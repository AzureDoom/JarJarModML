buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath "com.modrinth.minotaur:Minotaur:2.+"
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: "com.modrinth.minotaur"
apply plugin: 'com.matthewprenger.cursegradle'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

minecraft {
    mappings channel: 'official', version: "${minecraft_version}"
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('runClient')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runServer')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--nogui", 'true', "--singleplayer", 'yes'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('runData')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    testCompileOnly.extendsFrom(compileOnly)
}

repositories {
    maven { url "https://dl.cloudsmith.io/public/azuredoom-mods/azurelib/maven/" }
    maven { url "https://maven.cloudsmith.io/azuredoom-mods/azurelib/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    implementation fg.deobf("mod.azure.azurelib:azurelib-forge-1.20:${azurelib_version_forge}")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    config "${mod_id}.forge.mixins.json"
}


jar.finalizedBy('reobfJar')


if (file('key.properties').exists()) {
    curseforge {

        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = "394527"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('CHANGELOG.txt')
            addGameVersion("1.20")
            addGameVersion("Forge")
            addGameVersion("Java 17")

            relations {
                requiredDependency 'azurelib'
            }
        }
    }
}

if (file('key.properties').exists()) {
    modrinth {
        def modrinthProp = new Properties()
        File secretPropsFile = file("key.properties")
        modrinthProp.load(secretPropsFile.newInputStream())

        token = modrinthProp.getProperty('modrinthKey')
        projectId = 'Zhqc8UeQ'
        versionNumber = project.version
        versionName = '1.20 Forge'
        uploadFile = jar
        changelog = rootProject.file("changelog.txt").text
        gameVersions = ['1.20']
        loaders = ['forge']
        dependencies {
            required.project "azurelib"
        }
    }
}