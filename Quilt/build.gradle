plugins {
    id 'org.quiltmc.loom' version '1.+'
    id 'maven-publish'
    id 'idea'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${mod_name}-quilt-${minecraft_version}"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"
    modImplementation("org.quiltmc:qsl:${quilt_stdlib_version}") {
        exclude group: "net.fabricmc"
    }
    modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilted_fabric_api}") {
        exclude group: "org.quiltmc", module: " qsl"
    }
    compileOnly project(":Common")
    compileOnly group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'
    annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1'
    modImplementation "maven.modrinth:midnightlib:1.1.0-fabric"
    modImplementation "mod.azure.azurelib:azurelib-fabric-1.19.3:${azurelib_version_fabric}"
    modImplementation("com.terraformersmc:modmenu:5.0.2")
}

loom {
    accessWidenerPath = file("${project(':Common').projectDir.path}/src/main/resources/${mod_id}_common.accesswidener")
    runs {
        client {
            client()
            setConfigName("Quilt Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Quilt Server")
            ideConfigGenerated(true)
            runDir("runServer")
        }
    }
    mixin {
        defaultRefmapName = "${mod_id}.refmap.json"
    }
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

if (file('key.properties').exists()) {
    curseforge {

        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = "394527"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('CHANGELOG.txt')
            addGameVersion("1.19.3")
            addGameVersion("Quilt")
            addGameVersion("Java 17")

            relations {
                requiredDependency 'qsl'
                requiredDependency 'azurelib'
                requiredDependency 'midnightlib'
            }
            mainArtifact(remapJar)

            afterEvaluate {
                uploadTask.dependsOn("remapJar")
            }
        }
        options {
            //debug = true
            forgeGradleIntegration = false
        }
    }
}

if (file('key.properties').exists()) {
    modrinth {
        def modrinthProp = new Properties()
        File secretPropsFile = file("key.properties")
        modrinthProp.load(secretPropsFile.newInputStream())

        token = modrinthProp.getProperty('modrinthKey')
        projectId = 'Zhqc8UeQ'
        versionNumber = project.version
        versionName = 'Quilt 1.19.3'
        uploadFile = remapJar
        changelog = rootProject.file("changelog.txt").text
        gameVersions = ['1.19.3']
        loaders = ['quilt']
        dependencies {
            required.project "azurelib"
            required.project "midnightlib"
            required.project "qsl"
        }
    }
}